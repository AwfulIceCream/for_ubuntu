#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/resource.h>
#include <signal.h>

using namespace std;

void MonitorProcessMemoryUsage(pid_t processId, rlim_t maxWorkingSetSize) {
    while (true) {
        usleep(5000000); // Sleep for 5 seconds (in microseconds)

        struct rusage usage;
        getrusage(RUSAGE_SELF, &usage); // Use RUSAGE_SELF to monitor the current process
        rlim_t workingSetSize = usage.ru_maxrss * 1024; // Convert to bytes

        if (workingSetSize > maxWorkingSetSize) {
            cout << "Memory limit exceeded. Terminating process." << endl;
            kill(processId, SIGKILL); // Terminate the process
            break;
        } else {
            cout << "Memory usage is within limits." << endl;
        }
    }
}

int main() {
    pid_t processId;
    rlim_t maxWorkingSetSize;

    cout << "Enter the Process ID to monitor: ";
    cin >> processId;

    cout << "Enter the maximum working set size (in bytes): ";
    cin >> maxWorkingSetSize;

    MonitorProcessMemoryUsage(processId, maxWorkingSetSize);

    return 0;
}
